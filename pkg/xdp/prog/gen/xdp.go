// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package gen generated by go-bindata.// sources:
// pkg/xdp/prog/obj/.gitkeep
// pkg/xdp/prog/obj/xdp.o
package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func GitkeepBytes() ([]byte, error) {
	return bindataRead(
		_Gitkeep,
		".gitkeep",
	)
}

func Gitkeep() (*asset, error) {
	bytes, err := GitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1597297142, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xdpO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x9a\x5f\x68\x5b\x55\x1c\xc7\x7f\xf9\xb3\xb4\xdb\xfa\x27\x6b\xd3\xb5\xeb\x5c\x9b\xad\x6b\xa7\xe0\x9a\xdc\xee\x5f\x07\x22\xb1\x6e\x56\xa5\xb2\x80\xab\xfa\x20\x24\x69\x97\x6d\xc1\x6c\x66\x4d\xd4\xe8\x8b\x99\x60\x99\x20\x52\x06\x62\xf1\x41\x8b\xfa\x50\xf4\x25\x20\xb8\x81\x0f\xed\xc3\x1e\x1c\xf8\x50\x41\x61\x08\x83\x22\x08\x22\x08\xc5\x07\x1d\x38\x8c\x9c\xdf\xbd\xd9\x3d\xfd\x9d\x73\xdc\x39\xbe\x7a\xbe\xa0\x77\xbf\xcf\xbe\xdf\x7b\x6f\xbe\x37\xe7\x26\x19\xf7\xcd\x93\x53\x4f\x04\x03\x01\x68\x2a\x00\x7f\x82\x3f\xf9\xba\x95\xf4\xff\x9c\xf2\xfe\x3f\x02\x01\xb8\x16\x71\x59\xae\x2b\xec\x6e\x77\xb8\xf3\x4a\xb7\xbb\x6d\x09\x01\x74\x00\xc0\xc1\xa1\xef\x71\xbe\x14\x6b\x73\xb7\xdd\xed\xb8\x3d\x17\x02\x68\x05\x80\x53\x8f\xbb\xfe\x9e\x50\x10\xae\x2c\x03\x5c\x0b\xbb\xb9\xe9\x50\x04\x2e\x93\xfd\x75\x01\xdc\x3b\xee\xc1\xa1\x9b\xb8\x65\x7e\xc6\x0b\xdd\x51\x77\x8e\x00\x04\x01\xe0\xf9\x10\x40\xa3\xc1\xf6\x7b\x03\xe6\x6f\x03\x74\x3e\x26\x9e\x5f\x6c\xd3\xfe\x56\xbc\xd7\xe1\x9e\xe7\x6c\xff\xdd\x06\xfa\x3f\xf1\xfc\x41\x80\xbb\x8d\x46\xa3\x8f\x94\xf4\x36\x76\xe7\xee\x87\x6d\xa7\xe1\x2b\x30\xc9\x4d\x43\xdd\xd0\xff\xb9\xa1\xff\x33\x43\xff\x47\x86\xfe\x45\x43\xff\x55\x43\xff\xbb\x86\xfe\x79\x43\x7f\xcd\xd0\xff\x86\xa1\xbf\x62\xe8\xbf\x68\xe8\x3f\x6f\xe8\x9f\x31\xf4\xbf\x68\xe8\x7f\xce\xd0\x9f\x36\xf4\x3f\x6d\xe8\x3f\x61\xe8\x7f\xd4\xd0\x3f\x6e\xe8\x1f\x33\xf4\x3f\x6c\xe8\x1f\x31\xf4\xc7\x0d\xfd\xfd\x86\xfe\x98\xa1\xbf\xc3\xd0\xdf\x6a\xe4\x6f\x7e\x3e\xf4\x78\x9f\x76\xcd\xfb\xf6\x4a\xd6\xf5\xbd\xef\xf9\x19\x0b\x7b\xff\x81\xe7\x65\xb9\x73\xc5\x97\x67\x72\xc5\x32\xfc\x5f\xc5\xf7\xd2\x68\xb8\xcc\xf6\x62\x7b\x51\xc9\xf6\x22\x97\xed\x45\x2e\xdb\x8b\x5c\xb6\x17\xb9\x6c\x2f\x72\xd9\x5e\xe4\xb2\xbd\xc8\x65\x7b\x91\xcb\xf6\x22\x97\xed\x45\x2e\xdb\x8b\x5c\xb6\x17\xb9\x6c\x2f\x72\xd9\x5e\xe4\xb2\xbd\xc8\x65\x7b\x91\xcb\xf6\x22\x97\xed\x45\x2e\xdb\x8b\x5c\xb6\x17\xb9\x6c\x2f\x72\xd9\x5e\xe4\xb2\xbd\xc8\x65\x7b\x91\xcb\xf6\x22\x97\xed\x45\x2e\xdb\x8b\x5c\xb6\x17\xb9\x4e\xbc\x92\x2b\xc6\x9f\x79\xea\x74\x62\x32\x3d\xf5\x6f\xbe\xb7\xf0\x11\x90\x90\xf7\xb4\x95\xaf\x49\x70\xf9\x5a\x64\x33\xef\xf5\xfc\x8b\xc4\xbf\x07\x00\xa2\xb0\x5f\xd8\xff\x4f\x01\xc6\xb7\x08\x7c\x32\xc8\x78\x87\xc0\x63\xc8\x3b\x05\xfe\x1d\xee\x27\x2a\xf0\x8f\x91\xef\x10\xf8\x59\xe4\x5d\x02\x3f\x8c\xbc\x5b\xe0\x7f\xe1\xf9\xc7\x04\x7e\x13\x79\x8f\xc0\x3f\x40\xbe\x53\xe0\x79\xe4\xbd\x02\xaf\xe3\x71\x23\x02\x3f\x8a\xaf\xb7\x4f\xe0\x21\xe4\xbb\x04\xbe\x8a\xfb\xe9\x17\xf8\x7b\xc8\x77\x0b\x7c\x1a\xf9\x03\x02\x1f\x42\xbe\x47\xe0\xbf\xe2\xf9\x0f\x08\xfc\x3a\xf2\x41\x81\xcf\x23\x8f\x0b\xfc\x34\xf2\xbd\x02\x7f\x0d\x8f\xdb\x22\xf0\x61\x7c\xbd\xfb\x04\xfe\x3b\xfa\x87\x04\x7e\x12\x79\xab\xc0\xdb\x90\x6f\x15\xf8\x8f\x78\x3e\xdb\x04\xbe\x8c\x7c\xbb\xc0\x5f\x45\xde\x26\xf0\x47\x90\xb7\x0b\xbc\x13\x79\x48\xe0\x77\xbc\x2d\x5b\x36\x6c\x15\x24\x03\xfe\xcc\xde\xcd\x59\x6e\x66\x57\x6f\x81\x9b\x07\xbc\xeb\xdd\x9c\x59\xfb\x1b\xdc\xcc\x5a\x8f\x07\xfd\x99\xb5\x9d\xe6\x66\xd6\x66\x8d\x9b\x59\x8b\x75\x6e\x66\xef\xc6\x75\x6e\x66\x57\x25\x1a\xf2\x67\xd6\x6e\x8a\x9b\x59\xab\x25\x6e\x66\x6d\x2e\x71\x33\x6b\x71\x8d\x9b\xb1\xbd\xb0\x3f\xb3\xd6\x92\xdc\xcc\x56\x7f\x96\x9b\x59\x87\x0b\xdc\xcc\x56\xf5\x2a\x37\xb3\xd5\xbc\xc1\xcd\x6c\x15\xc7\xb7\xf8\x33\x5b\xbd\x69\x6e\x66\xab\xb6\xc6\xcd\x6c\xb5\xd6\xb9\x99\xad\xd2\x75\x6e\x66\xab\x30\x1a\xf1\x67\xb6\xfa\x52\xdc\xcc\x56\x5d\x89\x9b\xd9\xaa\x5a\xe2\x66\x5c\x4d\xa3\x95\x7c\xb5\x02\xa3\x73\xf9\x62\xf5\x4c\x29\x51\x3d\x53\xca\x14\x4a\x99\xb3\x85\x62\x25\x3f\x07\x99\x4c\xb1\x30\x9b\xbf\x58\xce\xc3\x68\xb9\x32\x57\xc9\xcd\xc0\x68\xf9\xf5\x0b\x6c\x7b\x21\x57\x2a\x27\x66\x8a\xb9\xd9\x97\x8a\x85\x72\xe5\x38\x4c\x4d\x4c\x24\x33\x87\x8e\x13\x3e\x46\x81\x43\xc1\x38\x4d\x50\xe0\x50\x70\x8c\x26\x28\x70\x28\x38\x4a\x13\x14\x38\x14\x1c\x71\x5f\xcf\x11\x1a\xa4\xc0\xa1\xe0\x30\x4d\x50\xe0\x50\x70\xc8\xab\x8e\x06\x29\x70\x04\x07\x9d\x29\x70\x04\x40\x0f\x4d\xc1\x18\x05\x8e\x10\x49\xd2\x08\x05\x4e\x52\xb8\xa5\xfc\x27\x1d\xc0\x4f\x6d\x51\xb5\x51\x77\xfb\x6c\x70\x33\x27\x8f\x99\xe2\xdc\xbc\x67\xf0\x4a\x29\x8e\x17\x26\xf3\xf6\xfb\xe4\xd7\xc9\x5f\xd0\x3b\x7b\x8b\x77\xff\xa1\x5a\x70\x1f\x23\xbe\x77\x5f\x1c\xf6\x5e\x67\x33\xdf\xfc\xc6\x70\x3b\xe0\x1e\x9f\x76\x10\xf7\x3e\x8a\xe8\x73\xb5\xf4\xfc\xbf\x50\xe4\xc7\x5b\xf5\xf2\x73\x8a\x7c\x7a\xab\x5e\x3e\xa5\xc8\x9f\xdf\xa6\x97\x6f\x51\xe4\x6b\xdb\xf5\xf2\x3f\x80\x3c\xbf\xd8\xa6\x97\xff\x54\x91\xaf\xb7\xeb\xe5\x2f\x29\xf2\xdf\x74\xe8\xe5\x8f\x29\xf2\xeb\x9d\x7a\xf9\x89\xa0\x3c\x7f\x27\xaa\x97\xef\x54\xe4\xa3\x5d\x7a\xf9\x6f\x15\xd7\xef\xc1\x6e\xbd\xfc\x87\x8a\x7c\x2a\xa6\x97\xcf\x29\xf2\x2f\xf4\xe8\xe5\x13\x8a\x7c\x69\xa7\x5e\xfe\x0f\xc5\xf5\xbb\xd2\xab\x97\xbf\xa1\xc8\x2f\xf5\xe9\xe5\xaf\x2a\xf2\xd7\x77\xe9\xe5\xb3\x8a\xfc\x5a\xbf\x5e\xde\x51\xbc\x7f\x7e\xd9\xad\x97\xff\x5b\xd1\x7f\xf3\x27\xc0\xfd\xf2\x5f\x2b\xf2\x7d\x03\x7a\xf9\x77\x14\xf9\xe4\xa0\x5e\x3e\xad\xc8\x3f\x19\xd7\xcb\x0f\x28\xf2\xd9\xbd\x7a\xf9\x9f\x15\xd7\xaf\xba\x4f\x2f\xff\xa5\x22\xbf\x30\xa4\x97\xbf\xac\xc8\x2f\xef\xd7\xcb\x9f\x52\xe4\x57\x87\xf5\xf2\x71\xc5\xfb\xef\xd6\x88\x5e\xfe\x37\x45\xff\x1b\x07\xf4\xf2\x83\x8a\xf3\x6f\x7d\xc8\xdd\xd2\x5f\x64\xf4\xfb\x4b\xc2\xfb\x77\x21\xaa\x3e\x2f\x5f\xe5\x7e\xb7\x84\xb9\xef\x0f\xcd\x5f\xe6\xff\x04\x00\x00\xff\xff\xe3\x67\x11\x23\x58\x3a\x00\x00")

func xdpOBytes() ([]byte, error) {
	return bindataRead(
		_xdpO,
		"xdp.o",
	)
}

func xdpO() (*asset, error) {
	bytes, err := xdpOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xdp.o", size: 14936, mode: os.FileMode(420), modTime: time.Unix(1597302028, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitkeep": Gitkeep,
	"xdp.o":    xdpO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".gitkeep": &bintree{Gitkeep, map[string]*bintree{}},
	"xdp.o":    &bintree{xdpO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
