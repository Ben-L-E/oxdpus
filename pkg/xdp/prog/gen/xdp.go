// Code generated by go-bindata.
// sources:
// pkg/xdp/prog/obj/.gitkeep
// pkg/xdp/prog/obj/xdp.o
// DO NOT EDIT!

package gen

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _Gitkeep = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x01\x00\x00\xff\xff\x00\x00\x00\x00\x00\x00\x00\x00")

func GitkeepBytes() ([]byte, error) {
	return bindataRead(
		_Gitkeep,
		".gitkeep",
	)
}

func Gitkeep() (*asset, error) {
	bytes, err := GitkeepBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".gitkeep", size: 0, mode: os.FileMode(420), modTime: time.Unix(1558950709, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _xdpO = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xe4\x94\xcf\x6e\xd3\x40\x10\xc6\x3f\x7b\xd3\x26\xa5\x05\x42\xd3\xa0\xa8\x42\x08\xa9\x57\xea\x46\x42\x20\xe0\x54\xca\xbf\x4b\x24\x10\x02\x71\xe0\x60\xd9\xa9\xdb\x5a\x38\x60\x6c\x1f\x0c\x42\x42\x1c\x40\x3d\x72\x41\xca\x99\x53\xdf\x20\xc7\x72\xe4\x25\x78\x0e\x38\x54\x32\xda\xdd\x71\x62\xc6\x1b\x21\x71\xed\x48\xf6\x64\x7e\x9e\xdd\x99\xf9\xbc\xf1\x87\xfb\x83\x07\xb6\x65\xa1\x34\x0b\xbf\x30\x8b\x66\xd6\x6b\xcc\x7e\x6f\xd3\xfd\x0c\x2c\x4c\x88\x79\xab\x3a\xc1\xbb\xa0\xe3\xe3\x8e\xf6\x4d\x01\x9c\x03\xb0\xb9\x71\x45\xc5\x6f\xd6\x56\xb4\xef\x9c\x55\x7e\x5f\x00\x2d\x00\x8f\xee\xea\xfc\xae\xb0\x71\x78\x04\x4c\x1a\x7a\xdd\x33\xb1\x88\x8f\x6c\xbf\x55\x60\x5a\x77\x73\xa3\xab\xbc\xcc\x97\x3c\xec\xb4\x75\x0c\xc0\x06\xf0\x5c\x00\x45\x21\xf7\x6d\xe3\xf3\x4f\xe0\xfc\x9d\x7a\x7f\x6b\x7f\xed\xb7\x4c\x73\xe8\x3e\x87\xeb\x27\x85\xca\xff\x46\xf9\x36\x70\x52\x14\x45\x8f\x89\xf4\x49\x69\x07\x1c\x13\x2f\xeb\x77\x49\xdb\x09\x3d\xff\x3a\xd5\x19\x68\xd0\x05\x52\x5c\xe6\xef\x47\xaf\x7d\x2f\x4a\x0d\x6f\xe0\x74\xd8\xc3\xc7\x03\xe5\xdb\x14\x5b\xef\x9e\xa0\xf5\x7e\xd9\x92\x6f\xa3\x47\x57\x69\x37\x4d\x07\x95\x99\xaf\xee\x02\x07\x8c\xbf\x20\x3e\x66\xfc\x29\xf1\xbe\x61\x6f\x01\x51\x63\x57\x55\xaf\x8b\x35\xbe\xa2\xf8\x42\x8d\x5f\x56\xbc\xbe\xcf\x6f\xf2\xb2\xac\xdc\xed\x52\x25\x56\x67\xc4\xc9\x82\x3c\xc3\xc8\x8b\xd3\x2d\x3f\xf2\x86\x2f\xa3\x30\xcd\xe0\x24\x41\x94\xef\xc6\x5b\xf9\x6e\xec\x86\xb1\xbb\x17\x46\x59\x90\xc0\x75\xa3\x70\x18\xbc\x4a\x03\xf5\xdc\x09\x0e\xdc\xbd\xc4\x1b\x05\x70\xd2\x2c\xc9\x3c\x1f\x4e\xfa\x76\x24\xfd\x60\x67\xa7\xef\xde\xd2\xee\xba\x76\xd7\x8c\x22\xfe\x87\xdd\x53\x7a\xd5\xed\x88\x60\xc8\x38\x97\xdb\xaa\x68\x51\xb5\xed\x39\xf5\x1a\x2c\x5e\xff\xc7\x7a\x7e\x76\x5a\x2c\xef\x22\x80\x25\x43\x9d\x43\xea\xbf\x3c\x9f\x4b\x34\x67\xb9\xbe\xe4\x4d\xaa\xcf\x35\xc8\xa9\x2e\xff\x7e\xf0\xfe\x9d\x39\xeb\xbf\xd8\xe6\x7c\xae\xdf\x6d\x62\x36\xe3\x63\x02\x7d\xc6\xf9\xfc\x37\xe6\xcc\x3f\x36\xcc\xdf\x34\xcc\x3f\x30\xd4\x96\xf6\x83\xe0\xf7\x4a\xdf\x0b\x95\xf5\xe5\xff\xfb\x4f\x00\x00\x00\xff\xff\x98\xad\x6d\x44\x98\x06\x00\x00")

func xdpOBytes() ([]byte, error) {
	return bindataRead(
		_xdpO,
		"xdp.o",
	)
}

func xdpO() (*asset, error) {
	bytes, err := xdpOBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "xdp.o", size: 1688, mode: os.FileMode(420), modTime: time.Unix(1558954386, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".gitkeep": Gitkeep,
	"xdp.o": xdpO,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	".gitkeep": &bintree{Gitkeep, map[string]*bintree{}},
	"xdp.o": &bintree{xdpO, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

